@page "/koeretoej-information"
@using MotorRegister.Api
@using MotorRegister.Core.Entities
@inject HttpClient HttpClient

<h1>Find information omkring køretøjer</h1>

<div class="card">
    <label for="licenseInput">Indtast nummerplade:</label>
    <input id="licenseInput" @bind="licensePlate" placeholder="AB12345" />
    <button @onclick="GetVehicleInformation">Søg</button>
</div>

@if (vehicle != null)
{
    <div class="vehicle-info">
        <p>Information omkring @vehicle.VehicleTypeName med nummerplade: @vehicle.RegistrationNumber</p>
        <p>Brug: @vehicle.Usage</p>
        <p>Registreringsnummer: @vehicle.RegistrationNumber</p>
        <p>Registreringsnummer Udløber:@vehicle.RegistrationNumberExpirationDate</p>
        <p>Registreringsstatus: @vehicle.RegistrationStatus</p>
        <p>Registreringsstatus Dato: @vehicle.RegistrationStatusDate</p>
        <p>Particelfilter: @vehicle.ParticleFilter</p>
        <p>Fabrikat: @vehicle.Designation.ManufacturerName</p>
        <p>Brændstoftype: @vehicle.EngineDetails.FuelName</p>
    </div>
}
else if (notFound)
{
    <div class="error">
        <p>Ingen data fundet for den indtastede nummerplade.</p>
    </div>
}

@code {
    private string licensePlate;
    private VehicleDTO vehicle;
    private bool notFound;
    
    private async Task GetVehicleInformation()
    {
        notFound = false;
        try
        {
            vehicle = await HttpClient.GetFromJsonAsync<VehicleDTO>($"Vehicle/GetVehicleFromLicensePlate/{licensePlate}") ?? new VehicleDTO();
        }
        catch (Exception ex)
        {
            notFound = true;        
        }
    }
}