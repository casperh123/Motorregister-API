// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorRegister.Infrastrucutre.Database;

#nullable disable

namespace MotorRegister.Infrastrucutre.Migrations
{
    [DbContext(typeof(MotorRegisterDbContext))]
    [Migration("20240805154937_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.6.24327.4");

            modelBuilder.Entity("MotorRegister.Core.Models.InspectionResult", b =>
                {
                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleId", "Date");

                    b.ToTable("InspectionResults");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Permit", b =>
                {
                    b.Property<int>("PermitTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermitTypeId", "Comment", "ValidFrom");

                    b.HasIndex("VehicleId");

                    b.ToTable("Permit");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.PermitType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PermitType");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Variant", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int?>("InformationId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegistrationNumberExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegistrationStatusDate")
                        .HasColumnType("TEXT");

                    b.Property<int?>("UsageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleTypeNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InformationId");

                    b.HasIndex("ModelId");

                    b.HasIndex("UsageId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleDesignation", b =>
                {
                    b.Property<string>("ManufacturerId")
                        .HasColumnType("TEXT");

                    b.Property<int>("ModelId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("VariantId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ManufacturerId", "ModelId", "TypeId", "VariantId");

                    b.HasIndex("ModelId");

                    b.HasIndex("TypeId");

                    b.HasIndex("VariantId");

                    b.ToTable("VehicleDesignation");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<short>("AxleCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ChassisNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CurbWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DesignationManufacturerId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DesignationModelId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DesignationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("DesignationVariantId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstRegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAxleLoad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("TechnicalTotalWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TowingCapability")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleDesignationManufacturerId")
                        .HasColumnType("TEXT");

                    b.Property<int?>("VehicleDesignationModelId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("VehicleDesignationTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("VehicleDesignationVariantId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DesignationManufacturerId", "DesignationModelId", "DesignationTypeId", "DesignationVariantId");

                    b.HasIndex("VehicleDesignationManufacturerId", "VehicleDesignationModelId", "VehicleDesignationTypeId", "VehicleDesignationVariantId");

                    b.ToTable("VehicleInformation");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VehicleUsage");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.InspectionResult", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.Vehicle", null)
                        .WithMany("InspectionResults")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Permit", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.PermitType", "PermitType")
                        .WithMany()
                        .HasForeignKey("PermitTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorRegister.Core.Models.Vehicle", null)
                        .WithMany("Permissions")
                        .HasForeignKey("VehicleId");

                    b.Navigation("PermitType");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Vehicle", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.VehicleInformation", "Information")
                        .WithMany()
                        .HasForeignKey("InformationId");

                    b.HasOne("MotorRegister.Core.Models.Model", null)
                        .WithMany("Vehicles")
                        .HasForeignKey("ModelId");

                    b.HasOne("MotorRegister.Core.Models.VehicleUsage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId");

                    b.Navigation("Information");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleDesignation", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorRegister.Core.Models.VehicleType", "VehicleType")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MotorRegister.Core.Models.Variant", "Variant")
                        .WithMany()
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Model");

                    b.Navigation("Variant");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleInformation", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.VehicleDesignation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationManufacturerId", "DesignationModelId", "DesignationTypeId", "DesignationVariantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorRegister.Core.Models.VehicleDesignation", null)
                        .WithMany()
                        .HasForeignKey("VehicleDesignationManufacturerId", "VehicleDesignationModelId", "VehicleDesignationTypeId", "VehicleDesignationVariantId");

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Model", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Vehicle", b =>
                {
                    b.Navigation("InspectionResults");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
