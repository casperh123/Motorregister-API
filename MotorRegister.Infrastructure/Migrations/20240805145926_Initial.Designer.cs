// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorRegister.Infrastrucutre.Database;

#nullable disable

namespace MotorRegister.Infrastrucutre.Migrations
{
    [DbContext(typeof(MotorRegisterDbContext))]
    [Migration("20240805145926_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.6.24327.4");

            modelBuilder.Entity("MotorRegister.Core.Models.InspectionResult", b =>
                {
                    b.Property<int>("VehicleId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId1")
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleId", "Date");

                    b.HasIndex("VehicleId1");

                    b.ToTable("InspectionResults");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Model", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.PermitStructure", b =>
                {
                    b.Property<string>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermitTypeId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PermitTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("ValidFrom", "Comment", "PermitTypeId");

                    b.HasIndex("VehicleId");

                    b.ToTable("PermitStructure", t =>
                        {
                            t.Property("PermitTypeId")
                                .HasColumnName("PermitStructure_PermitTypeId");

                            t.Property("PermitTypeName")
                                .HasColumnName("PermitStructure_PermitTypeName");
                        });
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Type", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Variant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InformationChassisNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumberExpirationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValue("");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationStatusDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("UsageId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleTypeNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InformationChassisNumber");

                    b.HasIndex("UsageId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleInformation", b =>
                {
                    b.Property<string>("ChassisNumber")
                        .HasColumnType("TEXT");

                    b.Property<short>("AxleCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedFrom")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("CurbWeight")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstRegistrationDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAxleLoad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StatusDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("TechnicalTotalWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TowingCapability")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChassisNumber");

                    b.ToTable("VehicleInformation");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleUsage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("VehicleUsage");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.InspectionResult", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.Vehicle", null)
                        .WithMany("InspectionResult")
                        .HasForeignKey("VehicleId1");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.PermitStructure", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.Vehicle", null)
                        .WithMany("Permissions")
                        .HasForeignKey("VehicleId");

                    b.OwnsOne("MotorRegister.Core.Models.PermitType", "PermitType", b1 =>
                        {
                            b1.Property<string>("PermitStructureValidFrom")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PermitStructureComment")
                                .HasColumnType("TEXT");

                            b1.Property<string>("PermitStructurePermitTypeId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Id")
                                .HasColumnType("TEXT")
                                .HasColumnName("PermitTypeId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("PermitTypeName");

                            b1.HasKey("PermitStructureValidFrom", "PermitStructureComment", "PermitStructurePermitTypeId");

                            b1.ToTable("PermitStructure");

                            b1.WithOwner()
                                .HasForeignKey("PermitStructureValidFrom", "PermitStructureComment", "PermitStructurePermitTypeId");
                        });

                    b.Navigation("PermitType")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Vehicle", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.VehicleInformation", "Information")
                        .WithMany()
                        .HasForeignKey("InformationChassisNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MotorRegister.Core.Models.VehicleUsage", "Usage")
                        .WithMany()
                        .HasForeignKey("UsageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Information");

                    b.Navigation("Usage");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleInformation", b =>
                {
                    b.OwnsOne("MotorRegister.Core.Models.VehicleDesignation", "Designation", b1 =>
                        {
                            b1.Property<string>("VehicleInformationChassisNumber")
                                .HasColumnType("TEXT");

                            b1.Property<string>("ManufacturerId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("ManufacturerName")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("ModelId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("TypeId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("VariantId")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("VehicleInformationChassisNumber");

                            b1.HasIndex("ModelId");

                            b1.HasIndex("TypeId");

                            b1.HasIndex("VariantId");

                            b1.ToTable("VehicleInformation");

                            b1.HasOne("MotorRegister.Core.Models.Model", "Model")
                                .WithMany()
                                .HasForeignKey("ModelId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("MotorRegister.Core.Models.Type", "Type")
                                .WithMany()
                                .HasForeignKey("TypeId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.HasOne("MotorRegister.Core.Models.Variant", "Variant")
                                .WithMany()
                                .HasForeignKey("VariantId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("VehicleInformationChassisNumber");

                            b1.Navigation("Model");

                            b1.Navigation("Type");

                            b1.Navigation("Variant");
                        });

                    b.Navigation("Designation")
                        .IsRequired();
                });

            modelBuilder.Entity("MotorRegister.Core.Models.Vehicle", b =>
                {
                    b.Navigation("InspectionResult");

                    b.Navigation("Permissions");
                });
#pragma warning restore 612, 618
        }
    }
}
