// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorRegister.Infrastrucutre.Database;

#nullable disable

namespace MotorRegister.Infrastrucutre.Migrations
{
    [DbContext(typeof(MotorRegisterDbContext))]
    [Migration("20240806093017_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0-preview.6.24327.4");

            modelBuilder.Entity("MotorRegister.Core.Entities.InspectionResult", b =>
                {
                    b.Property<int>("InspectionResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("InspectionResultId");

                    b.HasIndex("VehicleId");

                    b.ToTable("InspectionResults");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.Permit", b =>
                {
                    b.Property<string>("PermitType")
                        .HasColumnType("TEXT");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ValidFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("PermitId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VehicleId")
                        .HasColumnType("TEXT");

                    b.HasKey("PermitType", "Comment", "ValidFrom");

                    b.HasIndex("VehicleId");

                    b.ToTable("Permits");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.Vehicle", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("InformationId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegistrationNumberExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RegistrationStatusDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("VehicleTypeNumber")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("InformationId");

                    b.ToTable("Vehicles");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.VehicleDesignation", b =>
                {
                    b.Property<int>("VehicleDesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModelName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VariantName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("VehicleType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("VehicleDesignationId");

                    b.ToTable("VehicleDesignations");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleInformation", b =>
                {
                    b.Property<string>("ChassisNumber")
                        .HasColumnType("TEXT");

                    b.Property<short>("AxleCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedFrom")
                        .HasColumnType("TEXT");

                    b.Property<int>("CurbWeight")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FirstRegistrationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxAxleLoad")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PassengerCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Status")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StatusDate")
                        .HasColumnType("TEXT");

                    b.Property<long>("TechnicalTotalWeight")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalWeight")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("TowingCapability")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VehicleDesignationId")
                        .HasColumnType("INTEGER");

                    b.HasKey("ChassisNumber");

                    b.HasIndex("VehicleDesignationId");

                    b.ToTable("VehicleInformations");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.InspectionResult", b =>
                {
                    b.HasOne("MotorRegister.Core.Entities.Vehicle", null)
                        .WithMany("InspectionResults")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.Permit", b =>
                {
                    b.HasOne("MotorRegister.Core.Entities.Vehicle", null)
                        .WithMany("Permits")
                        .HasForeignKey("VehicleId");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.Vehicle", b =>
                {
                    b.HasOne("MotorRegister.Core.Models.VehicleInformation", "Information")
                        .WithMany()
                        .HasForeignKey("InformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Information");
                });

            modelBuilder.Entity("MotorRegister.Core.Models.VehicleInformation", b =>
                {
                    b.HasOne("MotorRegister.Core.Entities.VehicleDesignation", "Designation")
                        .WithMany()
                        .HasForeignKey("VehicleDesignationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Designation");
                });

            modelBuilder.Entity("MotorRegister.Core.Entities.Vehicle", b =>
                {
                    b.Navigation("InspectionResults");

                    b.Navigation("Permits");
                });
#pragma warning restore 612, 618
        }
    }
}
